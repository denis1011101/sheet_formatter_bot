# frozen_string_literal: true

require "spec_helper"
require_relative "../../lib/sheet_formatter_bot/utils/slot_utils"

RSpec.describe SheetFormatterBot::Utils::SlotUtils do
  let(:dummy_class) { Class.new { include SheetFormatterBot::Utils::SlotUtils } }
  let(:utils) { dummy_class.new }

  describe ".IGNORED_SLOT_NAMES" do
    it "contains technical values" do
      expect(described_class::IGNORED_SLOT_NAMES).to include("–æ–¥–∏–Ω –∫–æ—Ä—Ç", "–¥–≤–∞ –∫–æ—Ä—Ç–∞", "–∫–æ—Ä—Ç—ã")
    end
  end

  describe "#slot_cancelled?" do
    it "recognizes cancelled slots" do
      expect(utils.slot_cancelled?("–æ—Ç–º–µ–Ω–µ–Ω")).to be true
      expect(utils.slot_cancelled?("–æ—Ç–º–µ–Ω—ë–Ω")).to be true
      expect(utils.slot_cancelled?("–æ—Ç–º–µ–Ω–∞")).to be true
      expect(utils.slot_cancelled?("—á—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω")).to be true
      expect(utils.slot_cancelled?("—á—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω—ë–Ω")).to be true
      expect(utils.slot_cancelled?("—á—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∞")).to be true
    end

    it "does not recognize regular values" do
      expect(utils.slot_cancelled?("–∏–≥—Ä–æ–∫")).to be false
      expect(utils.slot_cancelled?("—Å–≤–æ–±–æ–¥–Ω–æ")).to be false
    end
  end

  describe "#format_slots_text" do
    it "returns 'All slots are cancelled' if all are cancelled" do
      expect(utils.format_slots_text(["–û—Ç–º–µ–Ω–µ–Ω", "–û—Ç–º–µ–Ω–µ–Ω"])).to eq("–í—Å–µ —Å–ª–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")
    end

    it "formats a list of slots with numbers and statuses" do
      slots = ["–û—Ç–º–µ–Ω–µ–Ω", "–°–≤–æ–±–æ–¥–Ω–æ", "–ò–≥—Ä–æ–∫"]
      expect(utils.format_slots_text(slots)).to eq(
        "1. üö´ –û—Ç–º–µ–Ω–µ–Ω\n2. ‚ö™ –°–≤–æ–±–æ–¥–Ω–æ\n3. –ò–≥—Ä–æ–∫"
      )
    end
  end
end
