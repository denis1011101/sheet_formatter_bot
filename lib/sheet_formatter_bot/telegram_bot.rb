# lib/sheet_formatter_bot/telegram_bot.rb
require "telegram/bot"

module SheetFormatterBot
  class TelegramBot
    attr_reader :token, :sheets_formatter, :bot_instance, :user_registry
    attr_accessor :notification_scheduler

    def initialize(token: Config.telegram_token, sheets_formatter: SheetsFormatter.new, user_registry: nil, notification_scheduler: nil)
      @token = token
      @sheets_formatter = sheets_formatter
      @bot_instance = nil # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ run
      @user_registry = user_registry || UserRegistry.new
      @notification_scheduler = notification_scheduler # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –µ—Å–ª–∏ nil
      @user_states = {} # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      log(:info, "TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    end

    def run
      lock_file = File.join(Dir.pwd, '.bot_running.lock')

      if File.exist?(lock_file)
        if process_still_running?(lock_file)
          log(:error, "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª .bot_running.lock")
          exit(1)
        else
          log(:warn, "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –∑–∞–ø—É—â–µ–Ω. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª.")
          File.delete(lock_file)
        end
      end

      # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –≤ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      File.write(lock_file, Process.pid)

      begin
        log(:info, "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        Telegram::Bot::Client.run(token) do |bot|
          @bot_instance = bot # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ API

          begin
            commands = [
              # { command: "/start", description: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ –∏ –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏" },
              # { command: "/show_menu", description: "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞" },
              # { command: "/myname", description: "–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ" },
              # { command: "/mappings", description: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω" },
              # { command: "/test", description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" }
            ]

            bot.api.set_my_commands(commands: commands)
            log(:info, "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
          rescue => e
            log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: #{e.message}")
          end

          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          @notification_scheduler = NotificationScheduler.new(bot: self, sheets_formatter: sheets_formatter)
          @notification_scheduler.start

          # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
          start_backup_thread

          log(:info, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Telegram. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
          listen(bot)
        end
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: #{e.message} (–ö–æ–¥: #{e.error_code}). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1) # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      rescue StandardError => e
        log(:error, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: #{e.message}\n#{e.backtrace.join("\n")}")
        exit(1)
      ensure
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        @notification_scheduler&.stop
        @backup_thread&.exit

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        File.delete(lock_file) if File.exist?(lock_file)
      end
    end

    def process_still_running?(lock_file)
      begin
        pid = File.read(lock_file).to_i
        Process.getpgid(pid)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        true
      rescue Errno::ESRCH
        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        false
      end
    end

    def handle_show_menu(message, _captures)
      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      user_id = message.from.id
      user = @user_registry.find_by_telegram_id(user_id)

      # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      unless user
        return handle_start(message, [])
      end

      # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      show_main_menu(message.chat.id)
    end

    def handle_name_mapping(message, captures)
      sheet_name = captures[0].strip # –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
      user_identifier = captures[1]

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      target_user = nil

      if user_identifier.start_with?("@")
        # –ò—â–µ–º –ø–æ @username
        username = user_identifier[1..]
        target_user = @user_registry.find_by_telegram_username(username)
      elsif user_identifier.include?("@")
        # –≠—Ç–æ email, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        send_message(message.chat.id,
                     "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ email –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
      else
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ ID
        telegram_id = user_identifier.to_i
        target_user = @user_registry.find_by_telegram_id(telegram_id)
      end

      unless target_user
        send_message(message.chat.id,
                     "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
      end

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      @user_registry.map_sheet_name_to_user(sheet_name, target_user.telegram_id)

      send_message(
        message.chat.id,
        "‚úÖ –£—Å–ø–µ—à–Ω–æ! –ò–º—è `#{sheet_name}` –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–µ–ø–µ—Ä—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{target_user.display_name}"
      )

      # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      @user_registry.create_backup
    end

    def handle_set_sheet_name(message, captures)
      # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
      sheet_name = captures[0].strip

      user = @user_registry.find_by_telegram_id(message.from.id)

      unless user
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user = User.from_telegram_user(message.from)
        @user_registry.register_user(user)
      end

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
      @user_registry.map_sheet_name_to_user(sheet_name, user.telegram_id)

      send_message(
        message.chat.id,
        "‚úÖ –£—Å–ø–µ—à–Ω–æ! –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ `#{sheet_name}`"
      )

      # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      @user_registry.create_backup
    end

    def handle_show_mappings(message, _captures)
      # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
      users_with_sheet_names = @user_registry.all_users.select { |u| u.sheet_name }

      if users_with_sheet_names.empty?
        send_message(message.chat.id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏–º–µ–Ω.")
        return
      end

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
      mappings_message = "–¢–µ–∫—É—â–∏–µ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∏–º–µ–Ω:\n\n"
      users_with_sheet_names.each do |user|
        mappings_message += "`#{user.sheet_name}` -> #{user.username ? "@#{user.username}" : user.full_name} (ID: #{user.telegram_id})\n"
      end

      send_message(message.chat.id, mappings_message)
    end

    def handle_sync_registry(message, _captures)
      log(:info, "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

      # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Config
      admin_ids = Config.admin_telegram_ids

      # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
      admin_ids = [85611094] if admin_ids.empty?

      unless admin_ids.include?(message.from.id)
        send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      users_count_before = @user_registry.size
      mappings_count_before = @user_registry.instance_variable_get(:@name_mapping).size

      # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      @user_registry.synchronize_users_and_mappings

      # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      users_count_after = @user_registry.size
      mappings_count_after = @user_registry.instance_variable_get(:@name_mapping).size

      # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      report = <<~REPORT
        üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: #{users_count_before} -> #{users_count_after}
        –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: #{mappings_count_before} -> #{mappings_count_after}

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ:
      REPORT

      # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º sheet_name
      users_with_sheet_name = @user_registry.all_users.select { |u| u.sheet_name }
      if users_with_sheet_name.any?
        users_with_sheet_name.each do |user|
          report += "\n- #{user.display_name} -> ¬´#{user.sheet_name}¬ª"
        end
      else
        report += "\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ!"
      end

      send_message(message.chat.id, report)

      # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      @user_registry.create_backup
    end

    def handle_start(message, _captures)
      # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      user_id = message.from.id
      first_name = message.from.first_name

      # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = User.from_telegram_user(message.from)
      @user_registry.register_user(user)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω—Ö (name_mapping.json)
      # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω–º –∏–º–µ–Ω –∏ –∏—â–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user_in_mapping = false
      sheet_name = nil

      @user_registry.instance_variable_get(:@name_mapping).each do |name, mapped_id|
        next unless mapped_id.to_s == user_id.to_s

        user_in_mapping = true
        sheet_name = name
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º sheet_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.sheet_name = sheet_name
        break
      end

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ —É–∂–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ
      if user.sheet_name || user_in_mapping
        # –ï—Å–ª–∏ –∏–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω—Ö –∏–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sheet_name ||= user.sheet_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –≤ –æ–±—ä–µ–∫—Ç–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω—Ö

        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        welcome_message = <<~WELCOME
          –ü—Ä–∏–≤–µ—Ç, #{first_name}! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.

          –†–∞–±–æ—Ç–∞—é —Å –ª–∏—Å—Ç–æ–º: *#{Config.default_sheet_name}* –≤ —Ç–∞–±–ª–∏—Ü–µ ID: `#{Config.spreadsheet_id}`

          –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ: *#{sheet_name}*

          –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        WELCOME

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
          inline_keyboard: [
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
                callback_data: "menu:slots"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data: "menu:change_name"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üë• –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω",
                callback_data: "menu:mappings"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                callback_data: "menu:test_notification"
              )
            ]
          ]
        )

        send_message(message.chat.id, welcome_message, reply_markup: keyboard)
      else
        # –ï—Å–ª–∏ –∏–º—è –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        welcome_message = <<~WELCOME
          –ü—Ä–∏–≤–µ—Ç, #{first_name}! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.
          –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!

          –†–∞–±–æ—Ç–∞—é —Å –ª–∏—Å—Ç–æ–º: *#{Config.default_sheet_name}* –≤ —Ç–∞–±–ª–∏—Ü–µ ID: `#{Config.spreadsheet_id}`

          –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
          –ö–∞–∫ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:
        WELCOME

        send_message(message.chat.id, welcome_message)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        @user_states[user_id] = { state: :awaiting_name }
      end
    end

    def handle_test_notification(message, _captures)
      user_id = message.from.id
      user = @user_registry.find_by_telegram_id(user_id)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      unless user
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user = User.from_telegram_user(message.from)
        @user_registry.register_user(user)
      end

      # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å
      unless user.sheet_name
        send_message(
          message.chat.id,
          "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/myname <–ò–º—è_–≤_—Ç–∞–±–ª–∏—Ü–µ>`"
        )
        return
      end

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      today_str = Date.today.strftime("%d.%m.%Y")

      if @notification_scheduler.send_test_notification(user, today_str)
        send_message(message.chat.id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
      else
        send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞?")
      end
    end

    def handle_cancel_court(message, captures)
      # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
      admin_ids = Config.admin_telegram_ids
      unless admin_ids.include?(message.from.id)
        send_message(message.chat.id, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
      end

      date_str = captures[0] # —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
      court_num = captures[1].to_i # –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ (1-8)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ç–∞
      unless (1..8).include?(court_num)
        send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 8.")
        return
      end

      # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ –≤ –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
      # –ö–æ—Ä—Ç—ã 1-4 - —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º (–∫–æ–ª–æ–Ω–∫–∏ 3-6), –∫–æ—Ä—Ç—ã 5-8 - –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∏ 7-10)
      column_index = court_num <= 4 ? court_num + 2 : court_num + 2

      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      spreadsheet_data = @sheets_formatter.get_spreadsheet_data

      # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π
      row_index = nil
      spreadsheet_data.each_with_index do |row, idx|
        next unless row[0] == date_str
        row_index = idx
        break
      end

      unless row_index
        send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è A1 –Ω–æ—Ç–∞—Ü–∏–∏
      col_letter = (column_index + 'A'.ord).chr
      cell_a1 = "#{col_letter}#{row_index + 1}"

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–æ—Ç–º–µ–Ω–∞" –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —è—á–µ–π–∫—É
      if update_cell_value(Config.default_sheet_name, cell_a1, "–æ—Ç–º–µ–Ω–∞")
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        @sheets_formatter.apply_format(Config.default_sheet_name, cell_a1, :text_color, "red")

        send_message(
          message.chat.id,
          "‚úÖ –ö–æ—Ä—Ç #{court_num} –Ω–∞ –¥–∞—Ç—É #{date_str} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π."
        )

        # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
        if Config.general_chat_id
          send_message(
            Config.general_chat_id,
            "‚ö†Ô∏è *–û–¢–ú–ï–ù–ê –ö–û–†–¢–ê*\n–ö–æ—Ä—Ç #{court_num} –Ω–∞ –¥–∞—Ç—É #{date_str} –æ—Ç–º–µ–Ω–µ–Ω."
          )
        end
      else
        send_message(
          message.chat.id,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–æ—Ä—Ç–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ."
        )
      end
    end

    private

    def start_backup_thread
      @backup_thread = Thread.new do
        while true
          begin
            sleep(3600) # –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–∞–∂–¥—ã–π —á–∞—Å
            @user_registry.create_backup
            log(:info, "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π")
          rescue StandardError => e
            log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: #{e.message}")
          end
        end
      end
    end

    def listen(bot)
      bot.listen do |message|
        case message
        when Telegram::Bot::Types::Message
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          next unless message.text

          log_incoming(message)

          begin
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            text_handled = handle_text_message(message)

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Ä–∞–º–∫–∞—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É
            unless text_handled
              command_found = CommandParser.dispatch(message, self)
              handle_unknown_command(message) unless command_found
            end
          rescue StandardError => e
            # –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            log(:error,
                "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #{message.message_id} –æ—Ç #{message.from.id}: #{e.message}\n#{e.backtrace.first(5).join("\n")}")
            send_error_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
          end

        when Telegram::Bot::Types::CallbackQuery
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
          log(:info, "–ü–æ–ª—É—á–µ–Ω callback: #{message.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{message.from.id}")

          begin
            if message.data.start_with?("attendance:")
              @notification_scheduler.handle_attendance_callback(message)
            elsif message.data.start_with?("book:")
              handle_booking_callback(message)
            elsif message.data.start_with?("menu:")
              handle_menu_callback(message)
            elsif message.data.start_with?("admin:")
              handle_admin_callback(message)
            else
              log(:warn, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback: #{message.data}")
            end
          rescue StandardError => e
            log(:error, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback #{message.id} –æ—Ç #{message.from.id}: #{e.message}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
            bot.api.answer_callback_query(
              callback_query_id: message.id,
              text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
            )
          end
        end
      end
    end

    def show_admin_menu(chat_id)
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      admin_ids = Config.admin_telegram_ids
      user_id = chat_id # –í private chat, chat_id –∏ user_id —Å–æ–≤–ø–∞–¥–∞—é—Ç

      unless admin_ids.include?(user_id)
        send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return nil
      end

      menu_text = <<~MENU
        üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      MENU

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
              callback_data: "admin:sync"
            )
          ],
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ—Ä—Ç",
              callback_data: "admin:cancel"
            )
          ],
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "üîó –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–º—è",
              callback_data: "admin:map"
            )
          ],
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: "¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
              callback_data: "menu:back"
            )
          ]
        ]
      )

      send_message(chat_id, menu_text, reply_markup: keyboard)

      true
    end

    def handle_admin_callback(callback_query)
      action = callback_query.data.split(":")[1]
      user_id = callback_query.from.id
      chat_id = callback_query.message.chat.id

      admin_ids = Config.admin_telegram_ids
      unless admin_ids.include?(user_id)
        answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", true)
        return
      end

      case action
      when "sync"
        answer_callback_query(callback_query.id, "–í—ã–ø–æ–ª–Ω—è—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")

        users_count_before = @user_registry.size
        mappings_count_before = @user_registry.instance_variable_get(:@name_mapping).size

        @user_registry.synchronize_users_and_mappings

        users_count_after = @user_registry.size
        mappings_count_after = @user_registry.instance_variable_get(:@name_mapping).size

        report = <<~REPORT
          üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!

          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: #{users_count_before} -> #{users_count_after}
          –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π: #{mappings_count_before} -> #{mappings_count_after}

          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ:
        REPORT

        users_with_sheet_name = @user_registry.all_users.select { |u| u.sheet_name }
        if users_with_sheet_name.any?
          users_with_sheet_name.each do |user|
            report += "\n- #{user.display_name} -> ¬´#{user.sheet_name}¬ª"
          end
        else
          report += "\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ!"
        end

        send_message(chat_id, report)

        @user_registry.create_backup

      when "cancel"
        answer_callback_query(callback_query.id)

        @user_states[user_id] = { state: :awaiting_cancel_date }

        send_message(
          chat_id,
          "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.05.2023):"
        )

      when "map"
        answer_callback_query(callback_query.id)

        @user_states[user_id] = { state: :awaiting_map_name }

        send_message(
          chat_id,
          "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:"
        )
      when "back"
        answer_callback_query(callback_query.id)
        show_main_menu(chat_id)
      end
    end

    def answer_callback_query(callback_query_id, text = nil, show_alert = false)
      return unless @bot_instance

      @bot_instance.api.answer_callback_query(
        callback_query_id: callback_query_id,
        text: text,
        show_alert: show_alert
      )
    rescue Telegram::Bot::Exceptions::ResponseError => e
      log_telegram_api_error(e)
    end

    def handle_menu_callback(callback_query)
      action = callback_query.data.split(":")[1]
      user_id = callback_query.from.id
      chat_id = callback_query.message.chat.id
      user = @user_registry.find_by_telegram_id(user_id)

      case action
      when "slots"
        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã..."
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –∏–º—è
        unless user && user.sheet_name
          send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
          return
        end

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        show_available_slots(chat_id)

      when "change_name"
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        @user_states[user_id] = { state: :changing_name }

        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id
        )

        send_message(
          chat_id,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:"
        )

      when "mappings"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω—Ö
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π..."
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        users_with_sheet_names = @user_registry.all_users.select { |u| u.sheet_name }

        if users_with_sheet_names.empty?
          send_message(chat_id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏–º–µ–Ω.")
          return
        end

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        mappings_message = "–¢–µ–∫—É—â–∏–µ –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∏–º–µ–Ω:\n\n"
        users_with_sheet_names.each do |user|
          mappings_message += "`#{user.sheet_name}` ‚Üí #{user.username ? "@#{user.username}" : user.full_name} (ID: #{user.telegram_id})\n"
        end

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
        keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
          inline_keyboard: [
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "¬´ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
                callback_data: "menu:back"
              )
            ]
          ]
        )

        send_message(chat_id, mappings_message, reply_markup: keyboard)

      when "test_notification"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ..."
        )

        unless user && user.sheet_name
          send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
          return
        end

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        today_str = Date.today.strftime("%d.%m.%Y")
        if @notification_scheduler.send_test_notification(user, today_str)
          send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else
          send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞?")
        end

      when "admin"
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
        )

        show_admin_menu(chat_id)

      when "back"
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        sheet_name = user&.sheet_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        welcome_message = <<~WELCOME
          –ú–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.

          –†–∞–±–æ—Ç–∞—é —Å –ª–∏—Å—Ç–æ–º: *#{Config.default_sheet_name}* –≤ —Ç–∞–±–ª–∏—Ü–µ ID: `#{Config.spreadsheet_id}`

          –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ: *#{sheet_name}*

          –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        WELCOME

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
          inline_keyboard: [
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
                callback_data: "menu:slots"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data: "menu:change_name"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üë• –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω",
                callback_data: "menu:mappings"
              )
            ],
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                callback_data: "menu:test_notification"
              )
            ]
          ]
        )

        # –õ–∏–±–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if callback_query.message
          @bot_instance.api.edit_message_text(
            chat_id: chat_id,
            message_id: callback_query.message.message_id,
            text: welcome_message,
            parse_mode: "Markdown",
            reply_markup: keyboard
          )
        else
          send_message(chat_id, welcome_message, reply_markup: keyboard)
        end
      end
    end

    def handle_text_message(message)
      user_id = message.from.id
      text = message.text

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if @user_states[user_id]
        case @user_states[user_id][:state]
        when :awaiting_name
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          handle_name_input(message, text)
          return true
        when :changing_name
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
          handle_name_change(message, text)
          return true

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        when :awaiting_cancel_date
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ—Ä—Ç–∞
          if text =~ /^\d{2}\.\d{2}\.\d{4}$/
            @user_states[user_id] = { state: :awaiting_cancel_court, date: text }
            send_message(
              message.chat.id,
              "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ (1-8):"
            )
          else
            send_message(
              message.chat.id,
              "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.05.2023):"
            )
          end
          return true

        when :awaiting_cancel_court
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ç–∞
          if text =~ /^[1-8]$/
            date_str = @user_states[user_id][:date]
            court_num = text.to_i

            # –û—Ç–º–µ—á–∞–µ–º –∫–æ—Ä—Ç –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
            handle_cancel_court(message, [date_str, text])

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            @user_states.delete(user_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞
            show_admin_menu(message.chat.id)
          else
            send_message(
              message.chat.id,
              "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8:"
            )
          end
          return true

        when :awaiting_map_name
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
          sheet_name = text.strip
          @user_states[user_id] = { state: :awaiting_map_user, sheet_name: sheet_name }
          send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:"
          )
          return true

        when :awaiting_map_user
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
          sheet_name = @user_states[user_id][:sheet_name]
          user_identifier = text.strip

          # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
          handle_name_mapping(message, [sheet_name, user_identifier])

          # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          @user_states.delete(user_id)

          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–Ω–æ–≤–∞
          show_admin_menu(message.chat.id)
          return true
        end
      end

      # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∏ –Ω–∞ —á—Ç–æ
      if text.start_with?("/start")
        handle_start(message, [])
        return true
      end

      # –ù–∏–∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é
      show_main_menu(message.chat.id, "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
      true # –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–º–∞–Ω–¥
    end

    def show_main_menu(chat_id, text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
      user_id = chat_id # –í private chat, chat_id –∏ user_id —Å–æ–≤–ø–∞–¥–∞—é—Ç
      user = @user_registry.find_by_telegram_id(user_id)
      sheet_name = user&.sheet_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

      menu_text = <<~MENU
        #{text}

        –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ: *#{sheet_name}*

        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      MENU

      # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
      keyboard_buttons = [
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
            callback_data: "menu:slots"
          )
        ],
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            callback_data: "menu:change_name"
          )
        ],
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üë• –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω",
            callback_data: "menu:mappings"
          )
        ],
        [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            callback_data: "menu:test_notification"
          )
        ]
      ]

      # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
      admin_ids = Config.admin_telegram_ids
      if admin_ids.include?(user_id)
        keyboard_buttons << [
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            callback_data: "menu:admin"
          )
        ]
      end

      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: keyboard_buttons
      )

      send_message(chat_id, menu_text, reply_markup: keyboard)
    end

    def handle_name_change(message, name)
      user_id = message.from.id

      # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –∏–º–µ–Ω–∏
      clean_name = name.strip

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      @user_registry.map_sheet_name_to_user(clean_name, user_id)

      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      @user_states[user_id] = { state: :registered }

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      success_message = "‚úÖ –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: *#{clean_name}*"
      show_main_menu(message.chat.id, success_message)

      # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      @user_registry.create_backup
    end

    def handle_name_input(message, name)
      user_id = message.from.id

      # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –∏–º–µ–Ω–∏
      clean_name = name.strip

      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      @user_registry.map_sheet_name_to_user(clean_name, user_id)

      # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
      @user_states[user_id] = { state: :registered }

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      success_message = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫: *#{clean_name}*"
      show_main_menu(message.chat.id, success_message)
    end

    def show_available_slots(chat_id)
      # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã

      spreadsheet_data = @sheets_formatter.get_spreadsheet_data

      # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É —Ç–µ–Ω–Ω–∏—Å–∞ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
      today = Date.today
      next_date_row = nil
      next_date_str = nil

      spreadsheet_data.each_with_index do |row, row_idx|
        next unless row[0] # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –¥–∞—Ç—ã

        begin
          row_date = Date.strptime(row[0], "%d.%m.%Y")
          if row_date >= today
            next_date_row = row
            next_date_str = row[0]
            break
          end
        rescue ArgumentError, TypeError
          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
          next
        end
      end

      unless next_date_row
        send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return
      end

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
      time_str = next_date_row[1] || "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
      place_str = next_date_row[2] || "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

      date_info = <<~INFO
        üìÖ –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞: *#{next_date_str}*
        üïí –í—Ä–µ–º—è: *#{time_str}*
        üìç –ú–µ—Å—Ç–æ: *#{place_str}*

        –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:
      INFO

      send_message(chat_id, date_info)

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º (–∫–æ–ª–æ–Ω–∫–∏ 3-6)
      slots_with_trainer = []
      for i in 3..6
        slot_name = next_date_row[i]
        slots_with_trainer << {
          index: i,
          name: slot_name.nil? || slot_name.strip.empty? ? nil : slot_name.strip
        }
      end

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∏ 7-10)
      slots_without_trainer = []
      for i in 7..10
        slot_name = next_date_row[i]
        slots_without_trainer << {
          index: i,
          name: slot_name.nil? || slot_name.strip.empty? ? nil : slot_name.strip
        }
      end

      # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
      show_slot_options(chat_id, next_date_str, slots_with_trainer, "–° —Ç—Ä–µ–Ω–µ—Ä–æ–º")

      # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–æ—Ç–æ–≤ –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞
      show_slot_options(chat_id, next_date_str, slots_without_trainer, "–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞")
    rescue StandardError => e
      log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–æ—Ç–æ–≤: #{e.message}\n#{e.backtrace.join("\n")}")
      send_message(chat_id,
                   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    end

    def show_slot_options(chat_id, date_str, slots, header)
      # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      message = "üë• *#{header}*:\n"

      slots.each_with_index do |slot, idx|
        if slot[:name]
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–º
          if slot[:name].downcase == "–æ—Ç–º–µ–Ω–∞"
            message += "#{idx + 1}. üö´ _–û—Ç–º–µ–Ω–µ–Ω_ ‚ùå\n"
          else
            message += "#{idx + 1}. #{slot[:name]} ‚úÖ\n"
          end
        else
          message += "#{idx + 1}. _–°–≤–æ–±–æ–¥–Ω–æ_ ‚ö™\n"
        end
      end

      send_message(chat_id, message)

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
      empty_slots = slots.select { |s| s[:name].nil? }

      if empty_slots.any?
        keyboard_buttons = empty_slots.map do |slot|
          Telegram::Bot::Types::InlineKeyboardButton.new(
            text: "–°–ª–æ—Ç #{slots.index { |s| s[:index] == slot[:index] } + 1}",
            callback_data: "book:#{date_str}:#{slot[:index]}"
          )
        end

        if keyboard_buttons.any?
          keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [keyboard_buttons]
          )

          send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup: keyboard
          )
        end
      else
        send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
      end
    end

    def handle_booking_callback(callback_query)
      data = callback_query.data
      _, date_str, slot_index = data.split(":")
      slot_index = slot_index.to_i

      user_id = callback_query.from.id
      user = @user_registry.find_by_telegram_id(user_id)

      unless user && user.sheet_name
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /myname"
        )
        return
      end

      # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
      begin
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet_data = @sheets_formatter.get_spreadsheet_data

        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –¥–∞—Ç–µ
        row_index = nil
        row = nil
        spreadsheet_data.each_with_index do |r, idx|
          next unless r[0] == date_str

          row_index = idx
          row = r
          break
        end

        unless row_index
          @bot_instance.api.answer_callback_query(
            callback_query_id: callback_query.id,
            text: "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"
          )
          return
        end

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        user_already_in_slots = false

        # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å, –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ü–∏–∫–ª–∞
        existing_col_letter = nil
        existing_slot_type = nil
        existing_slot_num = nil

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ 3-10, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–æ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        (3..10).each do |col_idx|
          next if col_idx == slot_index # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
          next if row[col_idx].nil? || row[col_idx].strip.empty? # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ—Ç–µ
          next unless row[col_idx].strip == user.sheet_name

          user_already_in_slots = true

          # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –≥–¥–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          existing_col_letter = (col_idx + "A".ord).chr
          existing_slot_type = col_idx >= 7 ? "–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞" : "—Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"
          existing_slot_num = col_idx >= 7 ? (col_idx - 6) : (col_idx - 2)

          break
        end

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        if user_already_in_slots
          @bot_instance.api.answer_callback_query(
            callback_query_id: callback_query.id,
            text: "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ #{date_str} (—Å–ª–æ—Ç #{existing_slot_num} #{existing_slot_type})!",
            show_alert: true
          )
          return
        end

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        col_letter = (slot_index + "A".ord).chr
        cell_a1 = "#{col_letter}#{row_index + 1}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–æ—Ç–∞ (—Å —Ç—Ä–µ–Ω–µ—Ä–æ–º/–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞)
        slot_type = slot_index >= 7 ? "–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞" : "—Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"
        slot_num = slot_index >= 7 ? (slot_index - 6) : (slot_index - 2)

        if update_cell_value(Config.default_sheet_name, cell_a1, user.sheet_name)
          @bot_instance.api.answer_callback_query(
            callback_query_id: callback_query.id,
            text: "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ #{date_str}!"
          )

          # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
          success_message = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ #{date_str} –≤ —Å–ª–æ—Ç #{slot_num} #{slot_type}!"

          # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
          keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã",
                  callback_data: "menu:slots"
                )
              ],
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                  callback_data: "menu:change_name"
                )
              ],
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "üë• –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω",
                  callback_data: "menu:mappings"
                )
              ],
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                  callback_data: "menu:test_notification"
                )
              ]
            ]
          )

          @bot_instance.api.edit_message_text(
            chat_id: callback_query.message.chat.id,
            message_id: callback_query.message.message_id,
            text: success_message,
            parse_mode: "Markdown",
            reply_markup: keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          )

          @sheets_formatter.apply_format(Config.default_sheet_name, cell_a1, :text_color, "green")
        else
          @bot_instance.api.answer_callback_query(
            callback_query_id: callback_query.id,
            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏"
          )
        end
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞: #{e.message}\n#{e.backtrace.join("\n")}")
        @bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
      end
    end

    def update_cell_value(sheet_name, cell_a1, value)
      # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ValueRange —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      value_range = Google::Apis::SheetsV4::ValueRange.new(
        range: "#{sheet_name}!#{cell_a1}",
        values: [[value]]
      )

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      @sheets_formatter.authenticated_service.update_spreadsheet_value(
        @sheets_formatter.spreadsheet_id,
        "#{sheet_name}!#{cell_a1}",
        value_range,
        value_input_option: "USER_ENTERED"
      )

      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
      @sheets_formatter.clear_cache

      true
    rescue StandardError => e
      log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è—á–µ–π–∫–∏ #{cell_a1}: #{e.message}")
      false
    end

    def handle_show_slots(message, _captures)
      user_id = message.from.id
      user = @user_registry.find_by_telegram_id(user_id)

      unless user
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user = User.from_telegram_user(message.from)
        @user_registry.register_user(user)
      end

      # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–∫–∞–∑–∞—Ç—å
      unless user.sheet_name
        send_message(
          message.chat.id,
          "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/myname <–ò–º—è_–≤_—Ç–∞–±–ª–∏—Ü–µ>`"
        )
        return
      end

      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
      show_available_slots(message.chat.id)
    end

    def handle_unknown_command(message)
      show_main_menu(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
    end

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    def send_message(chat_id, text, **options)
      return unless @bot_instance # –ù–µ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

      log(:debug, "-> –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ #{chat_id}: #{text.gsub("\n", " ")}")
      @bot_instance.api.send_message(chat_id: chat_id, text: text, parse_mode: "Markdown", **options)
    rescue Telegram::Bot::Exceptions::ResponseError => e
      log_telegram_api_error(e, chat_id)
    end

    def send_error_message(chat_id, text)
      send_message(chat_id, "‚ùó #{text}")
    end

    def log_incoming(message)
      user = message.from
      user_info = user ? "#{user.first_name} #{user.last_name}".strip + " (@#{user.username}, ID: #{user.id})" : "Unknown User"
      chat_info = "(Chat ID: #{message.chat.id}, Type: #{message.chat.type})"
      log(:info, "<- –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç #{user_info} –≤ #{chat_info}: '#{message.text}'")
    end

    def log_telegram_api_error(error, chat_id = "N/A")
      log(:error, "–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç #{chat_id}: #{error.message} (–ö–æ–¥: #{error.error_code})")
      case error.error_code
      when 400 # Bad Request
        log(:warn, "   -> –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown?")
      when 403 # Forbidden
        log(:warn, "   -> –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ #{chat_id}.")
      when 429 # Too Many Requests
        log(:warn, "   -> –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Telegram API. –ù—É–∂–Ω–æ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è.")
        sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      end
    end

    # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ stdout
    def log(level, message)
      puts "[#{Time.now.strftime("%Y-%m-%d %H:%M:%S")}] [#{level.upcase}] [TelegramBot] #{message}"
    end
  end
end
