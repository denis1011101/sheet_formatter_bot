require 'date'
require 'time'
require 'tzinfo'

module SheetFormatterBot
  class NotificationScheduler
    attr_reader :bot, :sheets_formatter

    def initialize(bot:, sheets_formatter:)
      @bot = bot
      @sheets_formatter = sheets_formatter
      @user_registry = bot.user_registry
      @running = false
      @thread = nil
      @sent_notifications = {} # –•–µ—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

      # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ Config
      @hours_before = Config.notification_hours_before
      @tennis_time = Config.tennis_default_time
      @check_interval = Config.notification_check_interval
      @timezone = TZInfo::Timezone.get(Config.timezone || 'Asia/Yekaterinburg')
    end

    def start
      return if @running

      @running = true
      @thread = Thread.new do
        log(:info, "–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        begin
          scheduler_loop
        rescue StandardError => e
          log(:error, "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: #{e.message}\n#{e.backtrace.join("\n")}")
          stop
        end
      end
    end

    def stop
      return unless @running

      @running = false
      @thread&.join(5) # –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      @thread&.kill if @thread&.alive?
      @thread = nil
      log(:info, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    end

    def get_user_current_attendance_status(sheet_name, date_str)
      begin
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet_data = @sheets_formatter.get_spreadsheet_data

        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        clean_player_name = sheet_name.strip

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏ –∏—â–µ–º —è—á–µ–π–∫—É —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
        spreadsheet_data.each_with_index do |row, row_idx|
          next unless row[0] == date_str  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å—Ç—Ä–æ–∫–µ —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ (–∫–æ–ª–æ–Ω–∫–∏ 3-10)
          (3..10).each do |col_idx|
            cell = row[col_idx].to_s

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
            if cell.strip == clean_player_name
              # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
              col_letter = (col_idx + 'A'.ord).chr
              cell_a1 = "#{col_letter}#{row_idx + 1}"

              formats = @sheets_formatter.get_cell_formats(Config.default_sheet_name, cell_a1)
              if formats && formats[:text_color]
                case formats[:text_color]
                when "green"
                  return "yes"
                when "red"
                  return "no"
                when "yellow"
                  return "maybe"
                end
              end

              # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
              return nil
            end
          end
        end

        # –ù–µ –Ω–∞—à–ª–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        return nil
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è: #{e.message}")
        return nil
      end
    end

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    def handle_attendance_callback(callback_query)
      data = callback_query.data
      _, response, date_str = data.split(':')

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
      is_explicit_confirmation = response.start_with?('confirm_')

      # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      if is_explicit_confirmation
        orig_response = response
        response = response.sub('confirm_', '')
        log(:info, "–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: #{orig_response} -> #{response}")
      end

      # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "no_reask" - –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç "–ù–µ—Ç" –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if response == "no_reask"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
          inline_keyboard: [
            [
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: '‚úÖ –î–∞',
                callback_data: "attendance:yes:#{date_str}"
              ),
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: '‚ùå –ù–µ—Ç',
                callback_data: "attendance:no:#{date_str}"
              ),
              Telegram::Bot::Types::InlineKeyboardButton.new(
                text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
                callback_data: "attendance:maybe:#{date_str}"
              )
            ]
          ]
        )

        message = <<~MESSAGE
          üéæ *–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –£–ß–ê–°–¢–ò–Ø*

          üìÖ –î–∞—Ç–∞: *#{date_str}*

          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è:
        MESSAGE

        begin
          # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          @bot.bot_instance.api.edit_message_reply_markup(
            chat_id: callback_query.message.chat.id,
            message_id: callback_query.message.message_id
          )

          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
          @bot.bot_instance.api.send_message(
            chat_id: callback_query.message.chat.id,
            text: message,
            parse_mode: "Markdown",
            reply_markup: keyboard
          )

          @bot.bot_instance.api.answer_callback_query(
            callback_query_id: callback_query.id,
            text: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è"
          )
        rescue StandardError => e
          log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ 'no_reask': #{e.message}")
        end

        return
      end

      return unless ['yes', 'no', 'maybe'].include?(response)

      telegram_id = callback_query.from.id
      user = @user_registry.find_by_telegram_id(telegram_id)

      unless user
        log(:warn, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: #{telegram_id}")
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
      sheet_name = user.sheet_name

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sheet_name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      unless sheet_name && !sheet_name.empty?
        log(:warn, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user.display_name} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
        @bot.bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–û—à–∏–±–∫–∞: –≤–∞—à–µ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /myname –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
          show_alert: true
        )
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      previous_status = get_user_current_attendance_status(sheet_name, date_str)

      # –í–ê–ñ–ù–ê–Ø –ß–ê–°–¢–¨: –ï—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ/–Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      is_confirmation = is_explicit_confirmation || (previous_status == response)
      is_changing = !is_confirmation && previous_status != nil

      log(:info, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç #{user.display_name}: response=#{response}, previous=#{previous_status}, is_explicit_confirmation=#{is_explicit_confirmation}, is_confirmation=#{is_confirmation}")

      # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
      should_update_sheet = !is_confirmation

      # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É - –ø–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
      if should_update_sheet
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        color = case response
                when 'yes' then 'green'
                when 'no' then 'red'
                when 'maybe' then 'yellow'
                end

        log(:info, "–ò–º—è –≤ —Ç–∞–±–ª–∏—Ü–µ: '#{sheet_name}', –ø–æ–∏—Å–∫ —è—á–µ–π–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ #{color}...")
        update_successful = update_attendance_in_sheet(date_str, sheet_name, color)
      else
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        log(:info, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user.display_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å '#{response}' - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è")
        update_successful = true
      end

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if update_successful || is_confirmation
        message = if is_confirmation
                    case response
                    when 'yes'
                      "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ñ–¥—ë–º –≤–∞—Å –Ω–∞ –∏–≥—Ä–µ."
                    when 'no'
                      "‚ùå –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –æ—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è."
                    when 'maybe'
                      "ü§î –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å '–ù–µ —É–≤–µ—Ä–µ–Ω'."
                    end
                  else
                    case response
                    when 'yes'
                      if is_changing && previous_status
                        "‚úÖ –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ '–î–∞'. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –∏–≥—Ä–µ!"
                      else
                        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç '–î–∞' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                      end
                    when 'no'
                      if is_changing && previous_status
                        "‚ùå –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ '–ù–µ—Ç'. –ñ–∞–ª—å, —á—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏."
                      else
                        "‚ùå –ñ–∞–ª—å! –í–∞—à –æ—Ç–≤–µ—Ç '–ù–µ—Ç' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                      end
                    when 'maybe'
                      if is_changing && previous_status
                        "ü§î –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ '–ù–µ —É–≤–µ—Ä–µ–Ω'. –ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!"
                      else
                        "ü§î –ü–æ–Ω—è—Ç–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç '–ù–µ —É–≤–µ—Ä–µ–Ω' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                      end
                    end
                  end

        @bot.bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!"
        )

        @bot.bot_instance.api.edit_message_text(
          chat_id: callback_query.message.chat.id,
          message_id: callback_query.message.message_id,
          text: "#{callback_query.message.text}\n\n#{message}",
          reply_markup: nil
        )
      else
        @bot.bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –∏–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ.",
          show_alert: true
        )
      end
    end

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    def send_test_notification(user, date_str)
      log(:info, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}")

      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      current_hour = @timezone.now.hour
      greeting = get_greeting_by_time

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞/–Ω–µ—Ç/–Ω–µ —É–≤–µ—Ä–µ–Ω
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚úÖ –î–∞',
              callback_data: "attendance:yes:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚ùå –ù–µ—Ç',
              callback_data: "attendance:no:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
              callback_data: "attendance:maybe:#{date_str}"
            )
          ]
        ]
      )

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
      message = "üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï üß™\n\n#{greeting}! –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Ç–µ–Ω–Ω–∏—Å –≤ #{@tennis_time} –≤ –æ–±—ã—á–Ω–æ–º –º–µ—Å—Ç–µ. –ü–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—Ä–∏–π—Ç–∏?"

      begin
        @bot.bot_instance.api.send_message(
          chat_id: user.telegram_id,
          text: message,
          reply_markup: keyboard
        )
        log(:info, "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è #{user.display_name}")
        return true
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: #{e.message}")
        return false
      end
    end

    private

    def scheduler_loop
      while @running
        check_and_send_notifications
        # –°–ø–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        sleep(@check_interval)
      end
    end

    def check_and_send_notifications
      begin
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        cleanup_sent_notifications

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        now = @timezone.now
        today = now.to_date
        tomorrow = today + 1

        log(:debug, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ #{today}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        spreadsheet_data = @sheets_formatter.get_spreadsheet_data

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_hour = now.hour

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        afternoon_hour = Config.morning_notification_hour # 13:00 (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é)
        evening_hour = Config.evening_notification_hour   # 18:00 (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ .env)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_games = find_games_for_date(spreadsheet_data, today.strftime('%d.%m.%Y'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow_games = find_games_for_date(spreadsheet_data, tomorrow.strftime('%d.%m.%Y'))

        # –î–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (13:00) –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∏–≥—Ä–∞—Ö
        if current_hour == afternoon_hour
          # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è
          if today_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö —Å–µ–≥–æ–¥–Ω—è (–≤—Å–µ–≥–æ: #{today_games.count})")
            today_games.each do |game|
              send_notifications_for_game(game, "—Å–µ–≥–æ–¥–Ω—è", "–¥–Ω–µ–≤–Ω–æ–µ")
            end
          end

          # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä—ã –∑–∞–≤—Ç—Ä–∞
          if tomorrow_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö –∑–∞–≤—Ç—Ä–∞ (–≤—Å–µ–≥–æ: #{tomorrow_games.count})")
            tomorrow_games.each do |game|
              send_notifications_for_game(game, "–∑–∞–≤—Ç—Ä–∞", "–¥–Ω–µ–≤–Ω–æ–µ")
            end
          end

          # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –∏–≥—Ä—ã –≤ 13:00
          if today_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∏–≥—Ä–∞—Ö")
            today_games.each do |game|
              send_general_chat_notification(game, "—Å–µ–≥–æ–¥–Ω—è")
            end
          end
        end

        # –í–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (18:00) –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∏–≥—Ä–∞—Ö
        if current_hour == evening_hour
          # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä—ã —Å–µ–≥–æ–¥–Ω—è
          if today_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö —Å–µ–≥–æ–¥–Ω—è (–≤—Å–µ–≥–æ: #{today_games.count})")
            today_games.each do |game|
              send_notifications_for_game(game, "—Å–µ–≥–æ–¥–Ω—è", "–≤–µ—á–µ—Ä–Ω–µ–µ")
            end
          end

          # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä—ã –∑–∞–≤—Ç—Ä–∞
          if tomorrow_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö –∑–∞–≤—Ç—Ä–∞ (–≤—Å–µ–≥–æ: #{tomorrow_games.count})")
            tomorrow_games.each do |game|
              send_notifications_for_game(game, "–∑–∞–≤—Ç—Ä–∞", "–≤–µ—á–µ—Ä–Ω–µ–µ")
            end
          end

          # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∏–≥—Ä—ã –≤ 18:00
          if tomorrow_games.any?
            log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö –∏–≥—Ä–∞—Ö")
            tomorrow_games.each do |game|
              send_general_chat_notification(game, "–∑–∞–≤—Ç—Ä–∞")
            end
          end
        end

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –¥–æ –∏–≥—Ä—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if Config.final_reminder_notification && today_games.any?
          today_games.each do |game|
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
            game_hour, game_min = game[:time].split(':').map(&:to_i)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –¥–æ –∏–≥—Ä—ã –¥–≤–∞ —á–∞—Å–∞
            hours_before = game_hour - current_hour
            if hours_before == 2 && now.min < 5 # –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤ XX:00 –∏ —Å–µ–π—á–∞—Å –Ω–∞—á–∞–ª–æ —á–∞—Å–∞ (XX-2):00-XX-2:05
              log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –¥–æ –∏–≥—Ä—ã –≤ #{game[:time]}")
              send_notifications_for_game(game, "—Å–µ–≥–æ–¥–Ω—è", "—Å–∫–æ—Ä–æ–µ")
            end
          end
        end
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: #{e.message}\n#{e.backtrace.join("\n")}")
      end
    end

    def find_games_for_date(spreadsheet_data, date_str)
      games = []

      spreadsheet_data.each do |row|
        next unless row[0] == date_str

        time = row[1] || @tennis_time
        place = row[2] || "–æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–æ–ª–æ–Ω–∫–∏ 3-10)
        players = row[3..10].compact.reject(&:empty?)

        games << {
          date: date_str,
          time: time,
          place: place,
          players: players
        }
      end

      games
    end

    def send_notifications_for_game(game, time_description, notification_type)
      log(:info, "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º #{notification_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–≥—Ä–µ #{time_description} –≤ #{game[:time]}")

      # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
      today = @timezone.now.to_date.strftime('%Y-%m-%d')
      notification_key = "#{today}:#{game[:date]}:#{notification_type}"

      # –ï—Å–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if @sent_notifications[notification_key]
        log(:info, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification_type} –¥–ª—è –∏–≥—Ä—ã #{game[:date]} —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
        return
      end

      players_notified = 0

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º (–Ω–µ "–æ—Ç–º–µ–Ω–∞")
      game[:players].each do |player_name|
        next if player_name.strip.downcase == "–æ—Ç–º–µ–Ω–∞"

        user = @user_registry.find_by_name(player_name)
        if user
          send_game_notification_to_user(user, game, time_description, notification_type)
          players_notified += 1
        else
          log(:warn, "Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{player_name}")
        end
      end

      # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ö–æ—Ç—è –±—ã 1)
      @sent_notifications[notification_key] = Time.now if players_notified > 0
    end

    def send_general_chat_notification(game, time_description)
      general_chat_id = Config.general_chat_id
      return unless general_chat_id # –ï—Å–ª–∏ ID –æ–±—â–µ–≥–æ —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

      # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–±—â–∏–π —á–∞—Ç
      today = @timezone.now.to_date.strftime('%Y-%m-%d')
      notification_key = "general_chat:#{today}:#{game[:date]}:#{time_description}"

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
      if @sent_notifications[notification_key]
        log(:info, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç –æ –∏–≥—Ä–µ #{game[:date]} (#{time_description}) —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è")
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      full_row_data = nil
      row_idx = nil
      spreadsheet_data = @sheets_formatter.get_spreadsheet_data

      spreadsheet_data.each_with_index do |row, idx|
        if row[0] == game[:date]
          full_row_data = row
          row_idx = idx + 1 # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ A1 –Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
          break
        end
      end

      return unless full_row_data

      log(:info, "–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–∞—Ç—ã #{game[:date]}, –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏: #{row_idx}")

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      slots_with_trainer = []
      slots_without_trainer = []

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º (–∫–æ–ª–æ–Ω–∫–∏ 3-6)
      process_slots(full_row_data, 3..6, slots_with_trainer, row_idx)

      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞ (–∫–æ–ª–æ–Ω–∫–∏ 7-10)
      process_slots(full_row_data, 7..10, slots_without_trainer, row_idx)

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –∑–∞–Ω—è—Ç—ã–µ)
      slots_with_trainer_available = slots_with_trainer.any? { |s| s == "–°–≤–æ–±–æ–¥–Ω–æ" }
      slots_without_trainer_available = slots_without_trainer.any? { |s| s == "–°–≤–æ–±–æ–¥–Ω–æ" }

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–æ—Ç–æ–≤, –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      slots_with_trainer_text = format_slots_text(slots_with_trainer)
      slots_without_trainer_text = format_slots_text(slots_without_trainer)

      # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –≤ –æ–±–æ–∏—Ö —Å–µ–∫—Ü–∏—è—Ö, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if slots_with_trainer.all? { |s| s == "–û—Ç–º–µ–Ω–µ–Ω" } && slots_without_trainer.all? { |s| s == "–û—Ç–º–µ–Ω–µ–Ω" }
        log(:info, "–í—Å–µ —Å–ª–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –Ω–∞ #{game[:date]} - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        return
      end

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Å–µ –ª–∏ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã
      all_slots_busy = !slots_with_trainer_available && !slots_without_trainer_available &&
                      !slots_with_trainer.all? { |s| s == "–û—Ç–º–µ–Ω–µ–Ω" } &&
                      !slots_without_trainer.all? { |s| s == "–û—Ç–º–µ–Ω–µ–Ω" }

      safe_username = escape_markdown(Config.telegram_bot_username)

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      message = <<~MESSAGE
        üìÖ #{time_description.capitalize} –∏–≥—Ä–∞ –≤ —Ç–µ–Ω–Ω–∏—Å:
        üïí –í—Ä–µ–º—è: *#{game[:time]}*
        üìç –ú–µ—Å—Ç–æ: *#{game[:place]}*

        üë• *–° —Ç—Ä–µ–Ω–µ—Ä–æ–º*:
        #{slots_with_trainer_text}

        üë• *–ë–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞*:
        #{slots_without_trainer_text}

        #{all_slots_busy ? "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è,\n–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º: @#{safe_username}" : "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: @#{safe_username}"}
      MESSAGE

      log(:info, "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞")

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
      begin
        @bot.bot_instance.api.send_message(
          chat_id: general_chat_id,
          text: message,
          parse_mode: 'Markdown'
        )

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        @sent_notifications[notification_key] = Time.now

        log(:info, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —á–∞—Ç")
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç: #{e.message}")
      end
    end

    def escape_markdown(text)
      return "" if text.nil?
      # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown: * _ [ ] ( ) ~ ` > # + - = | { } . !
      text.to_s.gsub(/([_*\[\]()~`>#+\-=|{}.!])/, '\\\\\\1')
    end

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
    def process_slots(row_data, range, slots_array, row_idx)
      range.each do |i|
        slot_name = row_data[i]

        if slot_name.nil? || slot_name.strip.empty?
          slots_array << "–°–≤–æ–±–æ–¥–Ω–æ"
          next
        end

        if slot_name.strip.downcase == "–æ—Ç–º–µ–Ω–∞"
          slots_array << "–û—Ç–º–µ–Ω–µ–Ω"
          next
        end

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —è—á–µ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        col_letter = (i + 'A'.ord).chr
        cell_a1 = "#{col_letter}#{row_idx}"
        formats = @sheets_formatter.get_cell_formats(Config.default_sheet_name, cell_a1)

        log(:debug, "–Ø—á–µ–π–∫–∞ #{cell_a1}, –∏–º—è: '#{slot_name}', —Ñ–æ—Ä–º–∞—Ç—ã: #{formats.inspect}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ü–≤–µ—Ç—É —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        status_emoji = "‚ö™" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞

        if formats && formats[:text_color]
          case formats[:text_color]
          when "green"
            status_emoji = "‚úÖ" # –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ
          when "red"
            status_emoji = "‚ùå" # –æ—Ç–∫–∞–∑–∞–ª—Å—è
          when "yellow"
            status_emoji = "ü§î" # –Ω–µ —É–≤–µ—Ä–µ–Ω
          end
          log(:debug, "–°—Ç–∞—Ç—É—Å –¥–ª—è '#{slot_name}': #{formats[:text_color]} -> #{status_emoji}")
        end

        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = @user_registry.find_by_name(slot_name.strip)
        display_name = user&.username ? "@#{user.username}" : slot_name.strip

        slots_array << "#{status_emoji} #{display_name}"
      end
    end

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ—Ç–æ–≤
    def format_slots_text(slots)
      if slots.all? { |s| s == "–û—Ç–º–µ–Ω–µ–Ω" }
        "–í—Å–µ —Å–ª–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã"
      else
        slots.map.with_index do |slot, idx|
          if slot == "–û—Ç–º–µ–Ω–µ–Ω"
            "#{idx + 1}. üö´ –û—Ç–º–µ–Ω–µ–Ω"
          elsif slot == "–°–≤–æ–±–æ–¥–Ω–æ"
            "#{idx + 1}. ‚ö™ –°–≤–æ–±–æ–¥–Ω–æ"
          else
            "#{idx + 1}. #{slot}"
          end
        end.join("\n")
      end
    end

    def cleanup_sent_notifications
      # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
      yesterday = @timezone.now - 86400 # 24 —á–∞—Å–∞
      @sent_notifications.delete_if { |_key, timestamp| timestamp < yesterday }
    end

    def send_game_notification_to_user(user, game, time_description, notification_type)
      return false unless @bot&.bot_instance && user&.telegram_id && user&.sheet_name

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
      current_status = get_user_current_attendance_status(user.sheet_name, game[:date])

      # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è –∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      if current_status == "no" && notification_type != :final_reminder && current_status
        log(:info, "–ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è")
        return false
      end

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      is_reminder = current_status.nil? ? false : true

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      status_text = case current_status
                    when "yes"
                      "‚úÖ –î–∞ (–≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ)"
                    when "no"
                      "‚ùå –ù–µ—Ç (–≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å)"
                    when "maybe"
                      "ü§î –ù–µ —É–≤–µ—Ä–µ–Ω"
                    else
                      "‚ö™ –ù–µ —É–∫–∞–∑–∞–Ω"
                    end

      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞
      if notification_type == :final_reminder
        # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –¥–æ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
        message = <<~MESSAGE
          ‚è∞ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï*: –ß–µ—Ä–µ–∑ —á–∞—Å —Ç–µ–Ω–Ω–∏—Å!

          üìÖ –î–∞—Ç–∞: *#{game[:date]}*
          üïí –í—Ä–µ–º—è: *#{game[:time]}*
          üìç –ú–µ—Å—Ç–æ: *#{game[:place]}*
        MESSAGE

        begin
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          @bot.bot_instance.api.send_message(
            chat_id: user.telegram_id,
            text: message,
            parse_mode: "Markdown"
          )
          return true
        rescue StandardError => e
          log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–≤–∞ —á–∞—Å–∞ –¥–ª—è #{user.display_name}: #{e.message}")
        end
      else
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if is_reminder
          # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ callback_data
          # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if current_status == "yes"
            yes_callback = "attendance:confirm_yes:#{game[:date]}"
          elsif current_status == "no"
            yes_callback = "attendance:confirm_no:#{game[:date]}"
          elsif current_status == "maybe"
            yes_callback = "attendance:confirm_maybe:#{game[:date]}"
          else
            yes_callback = "attendance:yes:#{game[:date]}"
          end

          keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: '‚úÖ –î–∞',
                  callback_data: yes_callback  # –í–æ—Ç –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é yes_callback
                ),
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: '‚ùå –ù–µ—Ç',
                  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è "–Ω–µ—Ç"
                  callback_data: "attendance:no_reask:#{game[:date]}"
                )
              ]
            ]
          )

          message = <<~MESSAGE
            üéæ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –¢–ï–ù–ù–ò–°–ï* #{time_description}

            üìÖ –î–∞—Ç–∞: *#{game[:date]}*
            üïí –í—Ä–µ–º—è: *#{game[:time]}*
            üìç –ú–µ—Å—Ç–æ: *#{game[:place]}*

            –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: #{status_text}
            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å—Ç–∞—Ç—É—Å?
          MESSAGE
        else
          # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
          keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
            inline_keyboard: [
              [
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: '‚úÖ –î–∞',
                  callback_data: "attendance:yes:#{game[:date]}"
                ),
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: '‚ùå –ù–µ—Ç',
                  callback_data: "attendance:no:#{game[:date]}"
                ),
                Telegram::Bot::Types::InlineKeyboardButton.new(
                  text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
                  callback_data: "attendance:maybe:#{game[:date]}"
                )
              ]
            ]
          )

          message = <<~MESSAGE
            üéæ *–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –¢–ï–ù–ù–ò–°* #{time_description}

            üìÖ –î–∞—Ç–∞: *#{game[:date]}*
            üïí –í—Ä–µ–º—è: *#{game[:time]}*
            üìç –ú–µ—Å—Ç–æ: *#{game[:place]}*

            #{current_status ? "–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: #{status_text}" : ""}
            –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏–π—Ç–∏?
          MESSAGE
        end

        begin
          @bot.bot_instance.api.send_message(
            chat_id: user.telegram_id,
            text: message,
            parse_mode: "Markdown",
            reply_markup: keyboard
          )
          return true
        rescue StandardError => e
          log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: #{e.message}")
        end
      end

      false
    end

    def get_greeting_by_time
      current_hour = @timezone.now.hour

      case current_hour
      when 5..11
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
      when 12..17
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
      when 18..23
        "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
      else
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π"
      end
    end

    def send_today_notifications
      today_str = Date.today.strftime('%d.%m.%Y')
      players = get_today_players

      if players.empty?
        log(:info, "–ò–≥—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (#{today_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
      end

      log(:info, "–ù–∞–π–¥–µ–Ω–æ #{players.size} –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è #{today_str}: #{players.join(', ')}")

      players.each do |player_name|
        user = @user_registry.find_by_name(player_name)
        if user
          send_notification_to_user(user, today_str)
        else
          log(:warn, "Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{player_name}")
        end
      end
    end

    def get_today_players
      today_str = Date.today.strftime('%d.%m.%Y')

      begin
        spreadsheet_data = @sheets_formatter.get_spreadsheet_data

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_row = nil

        spreadsheet_data.each do |row|
          if row[0] == today_str
            today_row = row
            break
          end
        end

        return [] unless today_row

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ 3-10)
        # –°—Ç–æ–ª–±—Ü—ã: 0=–¥–∞—Ç–∞, 1=–≤—Ä–µ–º—è, 2=–º–µ—Å—Ç–æ, 3-6=—Å —Ç—Ä–µ–Ω–µ—Ä–æ–º, 7-10=–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞
        players = today_row[3..10].compact.reject(&:empty?)

        return players
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: #{e.message}")
        return []
      end
    end

    def send_notification_to_user(user, date_str)
      log(:info, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name} –Ω–∞ #{date_str}")

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞/–Ω–µ—Ç/–Ω–µ —É–≤–µ—Ä–µ–Ω
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚úÖ –î–∞',
              callback_data: "attendance:yes:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚ùå –ù–µ—Ç',
              callback_data: "attendance:no:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
              callback_data: "attendance:maybe:#{date_str}"
            )
          ]
        ]
      )

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
      message = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–π–¥—ë—à—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–µ–Ω–Ω–∏—Å –≤ #{@tennis_time}?"

      begin
        @bot.bot_instance.api.send_message(
          chat_id: user.telegram_id,
          text: message,
          reply_markup: keyboard
        )
        log(:info, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è #{user.display_name}")
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: #{e.message}")
      end
    end

    def update_attendance_in_sheet(date_str, player_name, color)
      begin
        log(:info, "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è #{player_name} –Ω–∞ #{date_str}")

        # –û—á–∏—â–∞–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        clean_player_name = player_name.strip

        # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        sheet_name = Config.default_sheet_name
        log(:info, "–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ #{sheet_name}")

        spreadsheet_data = @sheets_formatter.get_spreadsheet_data
        log(:info, "–ü–æ–ª—É—á–µ–Ω–æ #{spreadsheet_data.size} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")

        target_row_index = nil
        target_col_index = nil

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π
        spreadsheet_data.each_with_index do |row, row_idx|
          log(:debug, "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É #{row_idx}: #{row[0] || '–ø—É—Å—Ç–æ'}")
          next unless row[0] == date_str

          log(:info, "–ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π #{date_str} (–∏–Ω–¥–µ–∫—Å: #{row_idx})")

          # –ò—â–µ–º —è—á–µ–π–∫—É —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
          row.each_with_index do |cell, col_idx|
            next if col_idx < 3 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞ (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ)
            next unless cell # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏

            log(:debug, "–ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É [#{row_idx}, #{col_idx}]: '#{cell}' (–¥–ª–∏–Ω–∞: #{cell.length})")

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
            if cell.strip == clean_player_name
              target_row_index = row_idx
              target_col_index = col_idx
              log(:info, "–ù–∞—à–ª–∏ —è—á–µ–π–∫—É –∏–≥—Ä–æ–∫–∞ #{player_name} [#{row_idx}, #{col_idx}]: '#{cell}'")
              break
            end
          end

          break if target_row_index
        end

        unless target_row_index && target_col_index
          log(:warn, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —è—á–µ–π–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ '#{player_name}' –Ω–∞ –¥–∞—Ç—É #{date_str}")
          return false
        end

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ A1 –Ω–æ—Ç–∞—Ü–∏—é
        col_letter = (target_col_index + 'A'.ord).chr
        cell_a1 = "#{col_letter}#{target_row_index + 1}"
        log(:info, "–Ø—á–µ–π–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: #{cell_a1}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ–Ω–∞
        log(:info, "–ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ #{color} –∫ —è—á–µ–π–∫–µ #{cell_a1}")
        @sheets_formatter.apply_format(sheet_name, cell_a1, :text_color, color)
        log(:info, "–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è: #{player_name} –Ω–∞ #{date_str} -> #{color}")

        return true
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è: #{e.message}")
        log(:error, "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: #{e.backtrace.join("\n")}")
        return false
      end
    end

    def log(level, message)
      puts "[#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}] [#{level.upcase}] [NotificationScheduler] #{message}"
    end
  end
end
