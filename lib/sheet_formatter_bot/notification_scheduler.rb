require 'date'
require 'time'

module SheetFormatterBot
  class NotificationScheduler
    attr_reader :bot, :sheets_formatter

    def initialize(bot:, sheets_formatter:)
      @bot = bot
      @sheets_formatter = sheets_formatter
      @user_registry = bot.user_registry
      @running = false
      @thread = nil

      # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ Config
      @hours_before = Config.notification_hours_before
      @tennis_time = Config.tennis_default_time
      @check_interval = Config.notification_check_interval
      @timezone = TZInfo::Timezone.get(Config.timezone || 'Asia/Yekaterinburg')
    end

    def start
      return if @running

      @running = true
      @thread = Thread.new do
        log(:info, "–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        begin
          scheduler_loop
        rescue StandardError => e
          log(:error, "–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: #{e.message}\n#{e.backtrace.join("\n")}")
          stop
        end
      end
    end

    def stop
      return unless @running

      @running = false
      @thread&.join(5) # –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      @thread&.kill if @thread&.alive?
      @thread = nil
      log(:info, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    end

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    def handle_attendance_callback(callback_query)
      data = callback_query.data
      _, response, date_str = data.split(':')

      return unless ['yes', 'no', 'maybe'].include?(response)

      telegram_id = callback_query.from.id
      user = @user_registry.find_by_telegram_id(telegram_id)

      unless user
        log(:warn, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: #{telegram_id}")
        return
      end

      # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
      sheet_name = user.sheet_name || user.display_name

      # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
      color = case response
              when 'yes' then 'green'
              when 'no' then 'red'
              when 'maybe' then 'yellow'
              end

      if update_attendance_in_sheet(date_str, sheet_name, color)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        message = case response
                  when 'yes' then "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç '–î–∞' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                  when 'no' then "‚ùå –ñ–∞–ª—å! –í–∞—à –æ—Ç–≤–µ—Ç '–ù–µ—Ç' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                  when 'maybe' then "ü§î –ü–æ–Ω—è—Ç–Ω–æ. –í–∞—à –æ—Ç–≤–µ—Ç '–ù–µ —É–≤–µ—Ä–µ–Ω' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                  end

        @bot.bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!"
        )

        @bot.bot_instance.api.edit_message_text(
          chat_id: callback_query.message.chat.id,
          message_id: callback_query.message.message_id,
          text: "#{callback_query.message.text}\n\n#{message}",
          reply_markup: nil
        )
      else
        @bot.bot_instance.api.answer_callback_query(
          callback_query_id: callback_query.id,
          text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        )
      end
    end

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    def send_test_notification(user, date_str)
      log(:info, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}")

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞/–Ω–µ—Ç/–Ω–µ —É–≤–µ—Ä–µ–Ω
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚úÖ –î–∞',
              callback_data: "attendance:yes:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚ùå –ù–µ—Ç',
              callback_data: "attendance:no:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
              callback_data: "attendance:maybe:#{date_str}"
            )
          ]
        ]
      )

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
      message = "üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï üß™\n\n–ü—Ä–∏–≤–µ—Ç! –ü–æ–π–¥—ë—à—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–µ–Ω–Ω–∏—Å –≤ #{@tennis_time}?"

      begin
        @bot.bot_instance.api.send_message(
          chat_id: user.telegram_id,
          text: message,
          reply_markup: keyboard
        )
        log(:info, "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è #{user.display_name}")
        return true
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: #{e.message}")
        return false
      end
    end

    private

    def scheduler_loop
      while @running
        check_and_send_notifications
        # –°–ø–∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        sleep(@check_interval)
      end
    end

    def check_and_send_notifications
      begin
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞
        now = @timezone.now
        today = now.to_date

        log(:debug, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ #{today}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = Time.now

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–Ω–Ω–∏—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        tennis_hour, tennis_min = @tennis_time.split(':').map(&:to_i)
        tennis_time = @timezone.local_time(now.year, now.month, now.day, tennis_hour, tennis_min)

        # –í—ã—á–∏—Å–ª—è–µ–º, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_time = tennis_time - (@hours_before * 60 * 60)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∏–Ω—É—Ç)
        time_window_start = now
        time_window_end = now + @check_interval

        if notification_time >= time_window_start && notification_time <= time_window_end
          log(:info, "–ü–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ç–µ–Ω–Ω–∏—Å–µ –≤ #{@tennis_time}")
          send_today_notifications
        else
          time_diff = (notification_time - now) / 60 # –≤ –º–∏–Ω—É—Ç–∞—Ö
          if time_diff > 0
            log(:debug, "–ï—â–µ –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ #{time_diff.to_i} –º–∏–Ω—É—Ç")
          else
            # –£–∂–µ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            log(:debug, "–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
          end
        end
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: #{e.message}\n#{e.backtrace.join("\n")}")
      end
    end

    def send_today_notifications
      today_str = Date.today.strftime('%d.%m.%Y')
      players = get_today_players

      if players.empty?
        log(:info, "–ò–≥—Ä–æ–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (#{today_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
      end

      log(:info, "–ù–∞–π–¥–µ–Ω–æ #{players.size} –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è #{today_str}: #{players.join(', ')}")

      players.each do |player_name|
        user = @user_registry.find_by_name(player_name)
        if user
          send_notification_to_user(user, today_str)
        else
          log(:warn, "Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: #{player_name}")
        end
      end
    end

    def get_today_players
      today_str = Date.today.strftime('%d.%m.%Y')

      begin
        spreadsheet_data = @sheets_formatter.get_spreadsheet_data

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_row = nil

        spreadsheet_data.each do |row|
          if row[0] == today_str
            today_row = row
            break
          end
        end

        return [] unless today_row

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ–ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ 3-10)
        # –°—Ç–æ–ª–±—Ü—ã: 0=–¥–∞—Ç–∞, 1=–≤—Ä–µ–º—è, 2=–º–µ—Å—Ç–æ, 3-6=—Å —Ç—Ä–µ–Ω–µ—Ä–æ–º, 7-10=–±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞
        players = today_row[3..10].compact.reject(&:empty?)

        return players
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: #{e.message}")
        return []
      end
    end

    def send_notification_to_user(user, date_str)
      log(:info, "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name} –Ω–∞ #{date_str}")

      # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞/–Ω–µ—Ç/–Ω–µ —É–≤–µ—Ä–µ–Ω
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚úÖ –î–∞',
              callback_data: "attendance:yes:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: '‚ùå –ù–µ—Ç',
              callback_data: "attendance:no:#{date_str}"
            ),
            Telegram::Bot::Types::InlineKeyboardButton.new(
              text: 'ü§î –ù–µ —É–≤–µ—Ä–µ–Ω',
              callback_data: "attendance:maybe:#{date_str}"
            )
          ]
        ]
      )

      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
      message = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–π–¥—ë—à—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ —Ç–µ–Ω–Ω–∏—Å –≤ #{@tennis_time}?"

      begin
        @bot.bot_instance.api.send_message(
          chat_id: user.telegram_id,
          text: message,
          reply_markup: keyboard
        )
        log(:info, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è #{user.display_name}")
      rescue Telegram::Bot::Exceptions::ResponseError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è #{user.display_name}: #{e.message}")
      end
    end

    def update_attendance_in_sheet(date_str, player_name, color)
      begin
        log(:info, "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è #{player_name} –Ω–∞ #{date_str}")

        # –ù–∞—Ö–æ–¥–∏–º —è—á–µ–π–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        sheet_name = Config.default_sheet_name
        log(:info, "–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ #{sheet_name}")

        spreadsheet_data = @sheets_formatter.get_spreadsheet_data
        log(:info, "–ü–æ–ª—É—á–µ–Ω–æ #{spreadsheet_data.size} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")

        target_row_index = nil
        target_col_index = nil

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π
        spreadsheet_data.each_with_index do |row, row_idx|
          log(:debug, "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É #{row_idx}: #{row[0] || '–ø—É—Å—Ç–æ'}")
          next unless row[0] == date_str

          log(:info, "–ù–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π #{date_str} (–∏–Ω–¥–µ–∫—Å: #{row_idx})")

          # –ò—â–µ–º —è—á–µ–π–∫—É —Å –∏–º–µ–Ω–µ–º –∏–≥—Ä–æ–∫–∞
          row.each_with_index do |cell, col_idx|
            next if col_idx < 3 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–æ–ª–±—Ü–∞ (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –º–µ—Å—Ç–æ)
            next unless cell # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏

            log(:debug, "–ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É [#{row_idx}, #{col_idx}]: '#{cell}' (–¥–ª–∏–Ω–∞: #{cell.length})")

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
            if cell.strip == player_name.strip
              target_row_index = row_idx
              target_col_index = col_idx
              log(:info, "–ù–∞—à–ª–∏ —è—á–µ–π–∫—É –∏–≥—Ä–æ–∫–∞ #{player_name} [#{row_idx}, #{col_idx}]: '#{cell}'")
              break
            end
          end

          break if target_row_index
        end

        unless target_row_index && target_col_index
          log(:warn, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —è—á–µ–π–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞ '#{player_name}' –Ω–∞ –¥–∞—Ç—É #{date_str}")
          return false
        end

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ A1 –Ω–æ—Ç–∞—Ü–∏—é
        col_letter = (target_col_index + 'A'.ord).chr
        cell_a1 = "#{col_letter}#{target_row_index + 1}"
        log(:info, "–Ø—á–µ–π–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: #{cell_a1}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ–Ω–∞
        log(:info, "–ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ #{color} –∫ —è—á–µ–π–∫–µ #{cell_a1}")
        @sheets_formatter.apply_format(sheet_name, cell_a1, :text_color, color)
        log(:info, "–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è: #{player_name} –Ω–∞ #{date_str} -> #{color}")

        return true
      rescue StandardError => e
        log(:error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è: #{e.message}")
        log(:error, "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: #{e.backtrace.join("\n")}")
        return false
      end
    end

    def log(level, message)
      puts "[#{Time.now.strftime('%Y-%m-%d %H:%M:%S')}] [#{level.upcase}] [NotificationScheduler] #{message}"
    end
  end
end
